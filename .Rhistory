x=numeric()
x
y
lm<-function(x){x*x}
lm
lm(x)
lm(x)
lm<-function(x){
x<-y
}
lm
lm(x)
make.power<-function(n){
pow<-function(x){
x^n}
pow}
cube<-make.power(3)
cube(2)
make.power(2,3)
square(x)<-make.power(2)
square<-make.power(2)
square(8)
set <- function(y) {
x <<- y
m <<- NULL
}
set(2)
set
set <- function(y) {
x <<- y
m <<- NULL
x}
set(2)
set <- function(y) {
x <<- y
m <<- NULL
m}
set(2)
x<-3
get <- function() x
get
get(3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector
makeVector
makeVector(2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean
cachemean(2,3,4)
cachemean(2)
makeVector(2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector<-c(2,3,4)
cachemean
makeVector
cachemean
cachemean(1)
cachemean(1,makeVector)
m <- solve(data,...)
}
## Write a short comment describing this function
}
}
}
setinverse = setinverse,
source('D:/CourseraProjects/Rprogramming/ProgrammingAssignment2/cachematrix.R')
source('D:/CourseraProjects/Rprogramming/ProgrammingAssignment2/cachematrix.R')
